// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  //url      = env("DATABASE_URL")
  url      = "mysql://root:ESRA3-pc59@localhost:3306/buster"
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int? // Ajoutez ce champ si nécessaire
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  Post     Post[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  ApiKey                 ApiKey[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Product {
  id              String   @id @default(cuid())
  name            String
  description     String?
  price           Float
  currency        String   @default("USD")
  active          Boolean  @default(true)
  requestLimit    Int // Limite de requêtes mensuelles
  bandwidthLimit  Int // Limite de bande passante mensuelle en Mo
  category        String // Catégorie du produit
  type            String // Type d'API
  language        String // Dev language ex: JS, Python
  license         String // ex: MIT
  likecount       Int // Nombre de favoris
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  stripeProductId String?  @unique
  stripePriceId   String?  @unique

  apiUsages ApiUsage[]

  @@map("products")
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String // ID de l'utilisateur propriétaire
  key       String   @unique // Clé API unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  revoked   Boolean  @default(false) // Clé active ou révoquée

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  ApiUsage ApiUsage[]

  @@map("api_keys")
}

model ApiUsage {
  id           String   @id @default(cuid())
  apiKeyId     String // ID de la clé API utilisée
  productId    String // ID du produit consommé
  requestCount Int      @default(0) // Nombre de requêtes utilisées
  bandwidth    Int      @default(0) // Bande passante utilisée en Mo
  month        DateTime @default(now()) // Mois de consommation
  createdAt    DateTime @default(now()) @map("created_at")

  apiKey  ApiKey  @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([apiKeyId, month]) // Un enregistrement par mois par clé API
  @@map("api_usages")
}
