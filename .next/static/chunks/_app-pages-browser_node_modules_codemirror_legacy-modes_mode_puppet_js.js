"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_codemirror_legacy-modes_mode_puppet_js"],{

/***/ "(app-pages-browser)/./node_modules/@codemirror/legacy-modes/mode/puppet.js":
/*!**************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/puppet.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   puppet: function() { return /* binding */ puppet; }\n/* harmony export */ });\n// Stores the words from the define method\nvar words = {};\n// Taken, mostly, from the Puppet official variable standards regex\nvar variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;\n\n// Takes a string of words separated by spaces and adds them as\n// keys with the value of the first argument 'style'\nfunction define(style, string) {\n  var split = string.split(' ');\n  for (var i = 0; i < split.length; i++) {\n    words[split[i]] = style;\n  }\n}\n\n// Takes commonly known puppet types/words and classifies them to a style\ndefine('keyword', 'class define site node include import inherits');\ndefine('keyword', 'case if else in and elsif default or');\ndefine('atom', 'false true running present absent file directory undef');\ndefine('builtin', 'action augeas burst chain computer cron destination dport exec ' +\n       'file filebucket group host icmp iniface interface jump k5login limit log_level ' +\n       'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' +\n       'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' +\n       'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' +\n       'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' +\n       'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' +\n       'resources router schedule scheduled_task selboolean selmodule service source ' +\n       'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' +\n       'user vlan yumrepo zfs zone zpool');\n\n// After finding a start of a string ('|\") this function attempts to find the end;\n// If a variable is encountered along the way, we display it differently when it\n// is encapsulated in a double-quoted string.\nfunction tokenString(stream, state) {\n  var current, prev, found_var = false;\n  while (!stream.eol() && (current = stream.next()) != state.pending) {\n    if (current === '$' && prev != '\\\\' && state.pending == '\"') {\n      found_var = true;\n      break;\n    }\n    prev = current;\n  }\n  if (found_var) {\n    stream.backUp(1);\n  }\n  if (current == state.pending) {\n    state.continueString = false;\n  } else {\n    state.continueString = true;\n  }\n  return \"string\";\n}\n\n// Main function\nfunction tokenize(stream, state) {\n  // Matches one whole word\n  var word = stream.match(/[\\w]+/, false);\n  // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)\n  var attribute = stream.match(/(\\s+)?\\w+\\s+=>.*/, false);\n  // Matches non-builtin resource declarations\n  // (i.e. \"apache::vhost {\" or \"mycustomclasss {\" would be matched)\n  var resource = stream.match(/(\\s+)?[\\w:_]+(\\s+)?{/, false);\n  // Matches virtual and exported resources (i.e. @@user { ; and the like)\n  var special_resource = stream.match(/(\\s+)?[@]{1,2}[\\w:_]+(\\s+)?{/, false);\n\n  // Finally advance the stream\n  var ch = stream.next();\n\n  // Have we found a variable?\n  if (ch === '$') {\n    if (stream.match(variable_regex)) {\n      // If so, and its in a string, assign it a different color\n      return state.continueString ? 'variableName.special' : 'variable';\n    }\n    // Otherwise return an invalid variable\n    return \"error\";\n  }\n  // Should we still be looking for the end of a string?\n  if (state.continueString) {\n    // If so, go through the loop again\n    stream.backUp(1);\n    return tokenString(stream, state);\n  }\n  // Are we in a definition (class, node, define)?\n  if (state.inDefinition) {\n    // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)\n    if (stream.match(/(\\s+)?[\\w:_]+(\\s+)?/)) {\n      return 'def';\n    }\n    // Match the rest it the next time around\n    stream.match(/\\s+{/);\n    state.inDefinition = false;\n  }\n  // Are we in an 'include' statement?\n  if (state.inInclude) {\n    // Match and return the included class\n    stream.match(/(\\s+)?\\S+(\\s+)?/);\n    state.inInclude = false;\n    return 'def';\n  }\n  // Do we just have a function on our hands?\n  // In 'ensure_resource(\"myclass\")', 'ensure_resource' is matched\n  if (stream.match(/(\\s+)?\\w+\\(/)) {\n    stream.backUp(1);\n    return 'def';\n  }\n  // Have we matched the prior attribute regex?\n  if (attribute) {\n    stream.match(/(\\s+)?\\w+/);\n    return 'tag';\n  }\n  // Do we have Puppet specific words?\n  if (word && words.hasOwnProperty(word)) {\n    // Negates the initial next()\n    stream.backUp(1);\n    // rs move the stream\n    stream.match(/[\\w]+/);\n    // We want to process these words differently\n    // do to the importance they have in Puppet\n    if (stream.match(/\\s+\\S+\\s+{/, false)) {\n      state.inDefinition = true;\n    }\n    if (word == 'include') {\n      state.inInclude = true;\n    }\n    // Returns their value as state in the prior define methods\n    return words[word];\n  }\n  // Is there a match on a reference?\n  if (/(^|\\s+)[A-Z][\\w:_]+/.test(word)) {\n    // Negate the next()\n    stream.backUp(1);\n    // Match the full reference\n    stream.match(/(^|\\s+)[A-Z][\\w:_]+/);\n    return 'def';\n  }\n  // Have we matched the prior resource regex?\n  if (resource) {\n    stream.match(/(\\s+)?[\\w:_]+/);\n    return 'def';\n  }\n  // Have we matched the prior special_resource regex?\n  if (special_resource) {\n    stream.match(/(\\s+)?[@]{1,2}/);\n    return 'atom';\n  }\n  // Match all the comments. All of them.\n  if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  // Have we found a string?\n  if (ch == \"'\" || ch == '\"') {\n    // Store the type (single or double)\n    state.pending = ch;\n    // Perform the looping function to find the end\n    return tokenString(stream, state);\n  }\n  // Match all the brackets\n  if (ch == '{' || ch == '}') {\n    return 'bracket';\n  }\n  // Match characters that we are going to assume\n  // are trying to be regex\n  if (ch == '/') {\n    stream.match(/^[^\\/]*\\//);\n    return 'string.special';\n  }\n  // Match all the numbers\n  if (ch.match(/[0-9]/)) {\n    stream.eatWhile(/[0-9]+/);\n    return 'number';\n  }\n  // Match the '=' and '=>' operators\n  if (ch == '=') {\n    if (stream.peek() == '>') {\n      stream.next();\n    }\n    return \"operator\";\n  }\n  // Keep advancing through all the rest\n  stream.eatWhile(/[\\w-]/);\n  // Return a blank line for everything else\n  return null;\n}\n// Start it all\nconst puppet = {\n  name: \"puppet\",\n\n  startState: function () {\n    var state = {};\n    state.inDefinition = false;\n    state.inInclude = false;\n    state.continueString = false;\n    state.pending = false;\n    return state;\n  },\n  token: function (stream, state) {\n    // Strip the spaces, but regex will account for them eitherway\n    if (stream.eatSpace()) return null;\n    // Go through the main process\n    return tokenize(stream, state);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9wdXBwZXQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw0REFBNEQ7O0FBRXBGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwyQkFBMkIsc0JBQXNCO0FBQ2pELG1EQUFtRDtBQUNuRCw2REFBNkQ7QUFDN0QsaURBQWlELElBQUksY0FBYzs7QUFFbkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELElBQUk7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixJQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvcHVwcGV0LmpzPzNlOGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3RvcmVzIHRoZSB3b3JkcyBmcm9tIHRoZSBkZWZpbmUgbWV0aG9kXG52YXIgd29yZHMgPSB7fTtcbi8vIFRha2VuLCBtb3N0bHksIGZyb20gdGhlIFB1cHBldCBvZmZpY2lhbCB2YXJpYWJsZSBzdGFuZGFyZHMgcmVnZXhcbnZhciB2YXJpYWJsZV9yZWdleCA9IC8oeyk/KFthLXpdW2EtejAtOV9dKik/KCg6OlthLXpdW2EtejAtOV9dKikqOjopP1thLXpBLVowLTlfXSsofSk/LztcblxuLy8gVGFrZXMgYSBzdHJpbmcgb2Ygd29yZHMgc2VwYXJhdGVkIGJ5IHNwYWNlcyBhbmQgYWRkcyB0aGVtIGFzXG4vLyBrZXlzIHdpdGggdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBhcmd1bWVudCAnc3R5bGUnXG5mdW5jdGlvbiBkZWZpbmUoc3R5bGUsIHN0cmluZykge1xuICB2YXIgc3BsaXQgPSBzdHJpbmcuc3BsaXQoJyAnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGxpdC5sZW5ndGg7IGkrKykge1xuICAgIHdvcmRzW3NwbGl0W2ldXSA9IHN0eWxlO1xuICB9XG59XG5cbi8vIFRha2VzIGNvbW1vbmx5IGtub3duIHB1cHBldCB0eXBlcy93b3JkcyBhbmQgY2xhc3NpZmllcyB0aGVtIHRvIGEgc3R5bGVcbmRlZmluZSgna2V5d29yZCcsICdjbGFzcyBkZWZpbmUgc2l0ZSBub2RlIGluY2x1ZGUgaW1wb3J0IGluaGVyaXRzJyk7XG5kZWZpbmUoJ2tleXdvcmQnLCAnY2FzZSBpZiBlbHNlIGluIGFuZCBlbHNpZiBkZWZhdWx0IG9yJyk7XG5kZWZpbmUoJ2F0b20nLCAnZmFsc2UgdHJ1ZSBydW5uaW5nIHByZXNlbnQgYWJzZW50IGZpbGUgZGlyZWN0b3J5IHVuZGVmJyk7XG5kZWZpbmUoJ2J1aWx0aW4nLCAnYWN0aW9uIGF1Z2VhcyBidXJzdCBjaGFpbiBjb21wdXRlciBjcm9uIGRlc3RpbmF0aW9uIGRwb3J0IGV4ZWMgJyArXG4gICAgICAgJ2ZpbGUgZmlsZWJ1Y2tldCBncm91cCBob3N0IGljbXAgaW5pZmFjZSBpbnRlcmZhY2UganVtcCBrNWxvZ2luIGxpbWl0IGxvZ19sZXZlbCAnICtcbiAgICAgICAnbG9nX3ByZWZpeCBtYWNhdXRob3JpemF0aW9uIG1haWxhbGlhcyBtYWlsbGlzdCBtY3ggbW91bnQgbmFnaW9zX2NvbW1hbmQgJyArXG4gICAgICAgJ25hZ2lvc19jb250YWN0IG5hZ2lvc19jb250YWN0Z3JvdXAgbmFnaW9zX2hvc3QgbmFnaW9zX2hvc3RkZXBlbmRlbmN5ICcgK1xuICAgICAgICduYWdpb3NfaG9zdGVzY2FsYXRpb24gbmFnaW9zX2hvc3RleHRpbmZvIG5hZ2lvc19ob3N0Z3JvdXAgbmFnaW9zX3NlcnZpY2UgJyArXG4gICAgICAgJ25hZ2lvc19zZXJ2aWNlZGVwZW5kZW5jeSBuYWdpb3Nfc2VydmljZWVzY2FsYXRpb24gbmFnaW9zX3NlcnZpY2VleHRpbmZvICcgK1xuICAgICAgICduYWdpb3Nfc2VydmljZWdyb3VwIG5hZ2lvc190aW1lcGVyaW9kIG5hbWUgbm90aWZ5IG91dGlmYWNlIHBhY2thZ2UgcHJvdG8gcmVqZWN0ICcgK1xuICAgICAgICdyZXNvdXJjZXMgcm91dGVyIHNjaGVkdWxlIHNjaGVkdWxlZF90YXNrIHNlbGJvb2xlYW4gc2VsbW9kdWxlIHNlcnZpY2Ugc291cmNlICcgK1xuICAgICAgICdzcG9ydCBzc2hfYXV0aG9yaXplZF9rZXkgc3Noa2V5IHN0YWdlIHN0YXRlIHRhYmxlIHRpZHkgdG9kZXN0IHRvcG9ydHMgdG9zb3VyY2UgJyArXG4gICAgICAgJ3VzZXIgdmxhbiB5dW1yZXBvIHpmcyB6b25lIHpwb29sJyk7XG5cbi8vIEFmdGVyIGZpbmRpbmcgYSBzdGFydCBvZiBhIHN0cmluZyAoJ3xcIikgdGhpcyBmdW5jdGlvbiBhdHRlbXB0cyB0byBmaW5kIHRoZSBlbmQ7XG4vLyBJZiBhIHZhcmlhYmxlIGlzIGVuY291bnRlcmVkIGFsb25nIHRoZSB3YXksIHdlIGRpc3BsYXkgaXQgZGlmZmVyZW50bHkgd2hlbiBpdFxuLy8gaXMgZW5jYXBzdWxhdGVkIGluIGEgZG91YmxlLXF1b3RlZCBzdHJpbmcuXG5mdW5jdGlvbiB0b2tlblN0cmluZyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBjdXJyZW50LCBwcmV2LCBmb3VuZF92YXIgPSBmYWxzZTtcbiAgd2hpbGUgKCFzdHJlYW0uZW9sKCkgJiYgKGN1cnJlbnQgPSBzdHJlYW0ubmV4dCgpKSAhPSBzdGF0ZS5wZW5kaW5nKSB7XG4gICAgaWYgKGN1cnJlbnQgPT09ICckJyAmJiBwcmV2ICE9ICdcXFxcJyAmJiBzdGF0ZS5wZW5kaW5nID09ICdcIicpIHtcbiAgICAgIGZvdW5kX3ZhciA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldiA9IGN1cnJlbnQ7XG4gIH1cbiAgaWYgKGZvdW5kX3Zhcikge1xuICAgIHN0cmVhbS5iYWNrVXAoMSk7XG4gIH1cbiAgaWYgKGN1cnJlbnQgPT0gc3RhdGUucGVuZGluZykge1xuICAgIHN0YXRlLmNvbnRpbnVlU3RyaW5nID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29udGludWVTdHJpbmcgPSB0cnVlO1xuICB9XG4gIHJldHVybiBcInN0cmluZ1wiO1xufVxuXG4vLyBNYWluIGZ1bmN0aW9uXG5mdW5jdGlvbiB0b2tlbml6ZShzdHJlYW0sIHN0YXRlKSB7XG4gIC8vIE1hdGNoZXMgb25lIHdob2xlIHdvcmRcbiAgdmFyIHdvcmQgPSBzdHJlYW0ubWF0Y2goL1tcXHddKy8sIGZhbHNlKTtcbiAgLy8gTWF0Y2hlcyBhdHRyaWJ1dGVzIChpLmUuIGVuc3VyZSA9PiBwcmVzZW50IDsgJ2Vuc3VyZScgd291bGQgYmUgbWF0Y2hlZClcbiAgdmFyIGF0dHJpYnV0ZSA9IHN0cmVhbS5tYXRjaCgvKFxccyspP1xcdytcXHMrPT4uKi8sIGZhbHNlKTtcbiAgLy8gTWF0Y2hlcyBub24tYnVpbHRpbiByZXNvdXJjZSBkZWNsYXJhdGlvbnNcbiAgLy8gKGkuZS4gXCJhcGFjaGU6OnZob3N0IHtcIiBvciBcIm15Y3VzdG9tY2xhc3NzIHtcIiB3b3VsZCBiZSBtYXRjaGVkKVxuICB2YXIgcmVzb3VyY2UgPSBzdHJlYW0ubWF0Y2goLyhcXHMrKT9bXFx3Ol9dKyhcXHMrKT97LywgZmFsc2UpO1xuICAvLyBNYXRjaGVzIHZpcnR1YWwgYW5kIGV4cG9ydGVkIHJlc291cmNlcyAoaS5lLiBAQHVzZXIgeyA7IGFuZCB0aGUgbGlrZSlcbiAgdmFyIHNwZWNpYWxfcmVzb3VyY2UgPSBzdHJlYW0ubWF0Y2goLyhcXHMrKT9bQF17MSwyfVtcXHc6X10rKFxccyspP3svLCBmYWxzZSk7XG5cbiAgLy8gRmluYWxseSBhZHZhbmNlIHRoZSBzdHJlYW1cbiAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTtcblxuICAvLyBIYXZlIHdlIGZvdW5kIGEgdmFyaWFibGU/XG4gIGlmIChjaCA9PT0gJyQnKSB7XG4gICAgaWYgKHN0cmVhbS5tYXRjaCh2YXJpYWJsZV9yZWdleCkpIHtcbiAgICAgIC8vIElmIHNvLCBhbmQgaXRzIGluIGEgc3RyaW5nLCBhc3NpZ24gaXQgYSBkaWZmZXJlbnQgY29sb3JcbiAgICAgIHJldHVybiBzdGF0ZS5jb250aW51ZVN0cmluZyA/ICd2YXJpYWJsZU5hbWUuc3BlY2lhbCcgOiAndmFyaWFibGUnO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UgcmV0dXJuIGFuIGludmFsaWQgdmFyaWFibGVcbiAgICByZXR1cm4gXCJlcnJvclwiO1xuICB9XG4gIC8vIFNob3VsZCB3ZSBzdGlsbCBiZSBsb29raW5nIGZvciB0aGUgZW5kIG9mIGEgc3RyaW5nP1xuICBpZiAoc3RhdGUuY29udGludWVTdHJpbmcpIHtcbiAgICAvLyBJZiBzbywgZ28gdGhyb3VnaCB0aGUgbG9vcCBhZ2FpblxuICAgIHN0cmVhbS5iYWNrVXAoMSk7XG4gICAgcmV0dXJuIHRva2VuU3RyaW5nKHN0cmVhbSwgc3RhdGUpO1xuICB9XG4gIC8vIEFyZSB3ZSBpbiBhIGRlZmluaXRpb24gKGNsYXNzLCBub2RlLCBkZWZpbmUpP1xuICBpZiAoc3RhdGUuaW5EZWZpbml0aW9uKSB7XG4gICAgLy8gSWYgc28sIHJldHVybiBkZWYgKGkuZS4gZm9yICdjbGFzcyBteWNsYXNzIHsnIDsgJ215Y2xhc3MnIHdvdWxkIGJlIG1hdGNoZWQpXG4gICAgaWYgKHN0cmVhbS5tYXRjaCgvKFxccyspP1tcXHc6X10rKFxccyspPy8pKSB7XG4gICAgICByZXR1cm4gJ2RlZic7XG4gICAgfVxuICAgIC8vIE1hdGNoIHRoZSByZXN0IGl0IHRoZSBuZXh0IHRpbWUgYXJvdW5kXG4gICAgc3RyZWFtLm1hdGNoKC9cXHMrey8pO1xuICAgIHN0YXRlLmluRGVmaW5pdGlvbiA9IGZhbHNlO1xuICB9XG4gIC8vIEFyZSB3ZSBpbiBhbiAnaW5jbHVkZScgc3RhdGVtZW50P1xuICBpZiAoc3RhdGUuaW5JbmNsdWRlKSB7XG4gICAgLy8gTWF0Y2ggYW5kIHJldHVybiB0aGUgaW5jbHVkZWQgY2xhc3NcbiAgICBzdHJlYW0ubWF0Y2goLyhcXHMrKT9cXFMrKFxccyspPy8pO1xuICAgIHN0YXRlLmluSW5jbHVkZSA9IGZhbHNlO1xuICAgIHJldHVybiAnZGVmJztcbiAgfVxuICAvLyBEbyB3ZSBqdXN0IGhhdmUgYSBmdW5jdGlvbiBvbiBvdXIgaGFuZHM/XG4gIC8vIEluICdlbnN1cmVfcmVzb3VyY2UoXCJteWNsYXNzXCIpJywgJ2Vuc3VyZV9yZXNvdXJjZScgaXMgbWF0Y2hlZFxuICBpZiAoc3RyZWFtLm1hdGNoKC8oXFxzKyk/XFx3K1xcKC8pKSB7XG4gICAgc3RyZWFtLmJhY2tVcCgxKTtcbiAgICByZXR1cm4gJ2RlZic7XG4gIH1cbiAgLy8gSGF2ZSB3ZSBtYXRjaGVkIHRoZSBwcmlvciBhdHRyaWJ1dGUgcmVnZXg/XG4gIGlmIChhdHRyaWJ1dGUpIHtcbiAgICBzdHJlYW0ubWF0Y2goLyhcXHMrKT9cXHcrLyk7XG4gICAgcmV0dXJuICd0YWcnO1xuICB9XG4gIC8vIERvIHdlIGhhdmUgUHVwcGV0IHNwZWNpZmljIHdvcmRzP1xuICBpZiAod29yZCAmJiB3b3Jkcy5oYXNPd25Qcm9wZXJ0eSh3b3JkKSkge1xuICAgIC8vIE5lZ2F0ZXMgdGhlIGluaXRpYWwgbmV4dCgpXG4gICAgc3RyZWFtLmJhY2tVcCgxKTtcbiAgICAvLyBycyBtb3ZlIHRoZSBzdHJlYW1cbiAgICBzdHJlYW0ubWF0Y2goL1tcXHddKy8pO1xuICAgIC8vIFdlIHdhbnQgdG8gcHJvY2VzcyB0aGVzZSB3b3JkcyBkaWZmZXJlbnRseVxuICAgIC8vIGRvIHRvIHRoZSBpbXBvcnRhbmNlIHRoZXkgaGF2ZSBpbiBQdXBwZXRcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9cXHMrXFxTK1xccyt7LywgZmFsc2UpKSB7XG4gICAgICBzdGF0ZS5pbkRlZmluaXRpb24gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAod29yZCA9PSAnaW5jbHVkZScpIHtcbiAgICAgIHN0YXRlLmluSW5jbHVkZSA9IHRydWU7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlaXIgdmFsdWUgYXMgc3RhdGUgaW4gdGhlIHByaW9yIGRlZmluZSBtZXRob2RzXG4gICAgcmV0dXJuIHdvcmRzW3dvcmRdO1xuICB9XG4gIC8vIElzIHRoZXJlIGEgbWF0Y2ggb24gYSByZWZlcmVuY2U/XG4gIGlmICgvKF58XFxzKylbQS1aXVtcXHc6X10rLy50ZXN0KHdvcmQpKSB7XG4gICAgLy8gTmVnYXRlIHRoZSBuZXh0KClcbiAgICBzdHJlYW0uYmFja1VwKDEpO1xuICAgIC8vIE1hdGNoIHRoZSBmdWxsIHJlZmVyZW5jZVxuICAgIHN0cmVhbS5tYXRjaCgvKF58XFxzKylbQS1aXVtcXHc6X10rLyk7XG4gICAgcmV0dXJuICdkZWYnO1xuICB9XG4gIC8vIEhhdmUgd2UgbWF0Y2hlZCB0aGUgcHJpb3IgcmVzb3VyY2UgcmVnZXg/XG4gIGlmIChyZXNvdXJjZSkge1xuICAgIHN0cmVhbS5tYXRjaCgvKFxccyspP1tcXHc6X10rLyk7XG4gICAgcmV0dXJuICdkZWYnO1xuICB9XG4gIC8vIEhhdmUgd2UgbWF0Y2hlZCB0aGUgcHJpb3Igc3BlY2lhbF9yZXNvdXJjZSByZWdleD9cbiAgaWYgKHNwZWNpYWxfcmVzb3VyY2UpIHtcbiAgICBzdHJlYW0ubWF0Y2goLyhcXHMrKT9bQF17MSwyfS8pO1xuICAgIHJldHVybiAnYXRvbSc7XG4gIH1cbiAgLy8gTWF0Y2ggYWxsIHRoZSBjb21tZW50cy4gQWxsIG9mIHRoZW0uXG4gIGlmIChjaCA9PSBcIiNcIikge1xuICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gIH1cbiAgLy8gSGF2ZSB3ZSBmb3VuZCBhIHN0cmluZz9cbiAgaWYgKGNoID09IFwiJ1wiIHx8IGNoID09ICdcIicpIHtcbiAgICAvLyBTdG9yZSB0aGUgdHlwZSAoc2luZ2xlIG9yIGRvdWJsZSlcbiAgICBzdGF0ZS5wZW5kaW5nID0gY2g7XG4gICAgLy8gUGVyZm9ybSB0aGUgbG9vcGluZyBmdW5jdGlvbiB0byBmaW5kIHRoZSBlbmRcbiAgICByZXR1cm4gdG9rZW5TdHJpbmcoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbiAgLy8gTWF0Y2ggYWxsIHRoZSBicmFja2V0c1xuICBpZiAoY2ggPT0gJ3snIHx8IGNoID09ICd9Jykge1xuICAgIHJldHVybiAnYnJhY2tldCc7XG4gIH1cbiAgLy8gTWF0Y2ggY2hhcmFjdGVycyB0aGF0IHdlIGFyZSBnb2luZyB0byBhc3N1bWVcbiAgLy8gYXJlIHRyeWluZyB0byBiZSByZWdleFxuICBpZiAoY2ggPT0gJy8nKSB7XG4gICAgc3RyZWFtLm1hdGNoKC9eW15cXC9dKlxcLy8pO1xuICAgIHJldHVybiAnc3RyaW5nLnNwZWNpYWwnO1xuICB9XG4gIC8vIE1hdGNoIGFsbCB0aGUgbnVtYmVyc1xuICBpZiAoY2gubWF0Y2goL1swLTldLykpIHtcbiAgICBzdHJlYW0uZWF0V2hpbGUoL1swLTldKy8pO1xuICAgIHJldHVybiAnbnVtYmVyJztcbiAgfVxuICAvLyBNYXRjaCB0aGUgJz0nIGFuZCAnPT4nIG9wZXJhdG9yc1xuICBpZiAoY2ggPT0gJz0nKSB7XG4gICAgaWYgKHN0cmVhbS5wZWVrKCkgPT0gJz4nKSB7XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgIH1cbiAgICByZXR1cm4gXCJvcGVyYXRvclwiO1xuICB9XG4gIC8vIEtlZXAgYWR2YW5jaW5nIHRocm91Z2ggYWxsIHRoZSByZXN0XG4gIHN0cmVhbS5lYXRXaGlsZSgvW1xcdy1dLyk7XG4gIC8vIFJldHVybiBhIGJsYW5rIGxpbmUgZm9yIGV2ZXJ5dGhpbmcgZWxzZVxuICByZXR1cm4gbnVsbDtcbn1cbi8vIFN0YXJ0IGl0IGFsbFxuZXhwb3J0IGNvbnN0IHB1cHBldCA9IHtcbiAgbmFtZTogXCJwdXBwZXRcIixcblxuICBzdGFydFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0ge307XG4gICAgc3RhdGUuaW5EZWZpbml0aW9uID0gZmFsc2U7XG4gICAgc3RhdGUuaW5JbmNsdWRlID0gZmFsc2U7XG4gICAgc3RhdGUuY29udGludWVTdHJpbmcgPSBmYWxzZTtcbiAgICBzdGF0ZS5wZW5kaW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9LFxuICB0b2tlbjogZnVuY3Rpb24gKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAvLyBTdHJpcCB0aGUgc3BhY2VzLCBidXQgcmVnZXggd2lsbCBhY2NvdW50IGZvciB0aGVtIGVpdGhlcndheVxuICAgIGlmIChzdHJlYW0uZWF0U3BhY2UoKSkgcmV0dXJuIG51bGw7XG4gICAgLy8gR28gdGhyb3VnaCB0aGUgbWFpbiBwcm9jZXNzXG4gICAgcmV0dXJuIHRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@codemirror/legacy-modes/mode/puppet.js\n"));

/***/ })

}]);